import { Router } from 'express';
import { AskRequestSchema, type AskResponse, type ErrorResponse } from './schema.js';
import { generateSQLWithOpenAI, generateNaturalResponse } from './openai.js';
import { validateAndSanitizeSql } from './sqlGuard.js';
import { executeQuery } from './db.js';
import pino from 'pino';

const router = Router();
const logger = pino({ 
  name: 'ask-route',
  transport: process.env.NODE_ENV === 'production' ? undefined : {
    target: 'pino-pretty',
    options: {
      colorize: true,
      translateTime: 'HH:MM:ss',
      ignore: 'pid,hostname,name',
      messageFormat: 'üîç {msg}',
      levelFirst: true,
      singleLine: true
    }
  }
});

/**
 * Manejador com√∫n para /ask y /chat
 */
const handleAskOrChat = async (req: any, res: any) => {
  const startTime = Date.now();

  try {
    const IS_TEST = process.env.NODE_ENV === 'test' || process.env.VITEST === 'true';
    // Validar payload de entrada
    const validationResult = AskRequestSchema.safeParse(req.body);
    if (!validationResult.success) {
      const errorResponse: ErrorResponse = {
        error: 'Datos de entrada inv√°lidos',
        code: 'VALIDATION_ERROR',
        details: validationResult.error.errors.map(e => e.message).join(', ')
      };
      
      logger.warn({ 
        body: req.body, 
        errors: validationResult.error.errors 
      }, 'Validaci√≥n de entrada fallida');
      
      return res.status(400).json(errorResponse);
    }

    const { question } = validationResult.data;
    const clientIp = req.ip || req.socket.remoteAddress || 'unknown';

    // Detectar intentos de inyecci√≥n SQL directa
    const sqlKeywords = ['drop', 'insert', 'update', 'delete', 'create', 'alter', 'truncate', 'grant', 'revoke'];
    const questionLower = question.toLowerCase().trim();
    
    for (const keyword of sqlKeywords) {
      if (questionLower.startsWith(keyword + ' ') || questionLower === keyword) {
        const errorResponse: ErrorResponse = {
          error: 'Datos de entrada inv√°lidos',
          code: 'VALIDATION_ERROR',
          details: 'No se permiten comandos SQL directos'
        };
        
        logger.warn({ 
          question: question,
          detectedKeyword: keyword,
          ip: clientIp
        }, 'Intento de inyecci√≥n SQL detectado');
        
        return res.status(400).json(errorResponse);
      }
    }
    
    logger.info({ question, ip: clientIp }, 'Nueva pregunta recibida');

    // Paso 0.5: Intento de resoluci√≥n directa de EVENTO y atributo (p.ej., precio)
    try {
      const wantsPrice = /\b(precio|price)\b/i.test(question);
      const eventCandidate = extractEventPhrase(question) ?? '';
      if (wantsPrice) {
        const resolved = await resolveEventByName(eventCandidate || question);
        if (resolved) {
          const directSql = `SELECT e.nombre AS evento, e.precio_entrada\nFROM Evento e\nWHERE e.id = ${resolved.evento_id}\nLIMIT 1`;
          // Validar/sanear y ejecutar como en flujo normal
          const { isValid, sanitizedSql, error: validationError } = validateAndSanitizeSql(directSql);
          if (isValid && sanitizedSql) {
            const rows = await executeQuery(sanitizedSql);
            const naturalResponse = await generateNaturalResponse(question, rows);
            const executionTime = Date.now() - startTime;
            const response: AskResponse = {
              sql: sanitizedSql,
              rows,
              explanation: `Precio del evento resuelto por nombre aproximado: "${resolved.evento_nombre}"`,
              naturalResponse,
              executionTime
            };
            logger.info({ question, sql: sanitizedSql, rowCount: rows.length, executionTime, ip: req.ip }, 'Consulta directa por evento resuelto');
            return res.json(response);
          } else {
            logger.warn({ question, directSql, validationError }, 'Validaci√≥n fallida de SQL directo de evento');
          }
        }
      }
    } catch (e) {
      logger.warn({ question, error: e instanceof Error ? e.message : e }, 'Error en resoluci√≥n directa de evento');
      // Continuar flujo normal
    }

    // Paso 0.6: Si piden descripci√≥n/info del evento y hay contexto previo con SQL, reutilizar WHERE/JOINS
    try {
      if (isDescriptionIntent(question) && Array.isArray(req.body.conversationContext) && req.body.conversationContext.length > 0) {
        const lastCtx = req.body.conversationContext[req.body.conversationContext.length - 1];
        if (lastCtx?.sql) {
          const descSql = buildDescriptionSqlFromPrevious(lastCtx.sql);
          if (descSql) {
            const { isValid, sanitizedSql, error: validationError } = validateAndSanitizeSql(descSql);
            if (isValid && sanitizedSql) {
              const rows = await executeQuery(sanitizedSql);
              const naturalResponse = await generateNaturalResponse(question, rows);
              const executionTime = Date.now() - startTime;
              const response: AskResponse = {
                sql: sanitizedSql,
                rows,
                explanation: 'Descripci√≥n/detalle del evento basada en el contexto previo',
                naturalResponse,
                executionTime
              };
              logger.info({ question, sql: sanitizedSql, rowCount: rows.length, executionTime, ip: req.ip }, 'Consulta de descripci√≥n usando contexto previo');
              return res.json(response);
            } else {
              logger.warn({ question, descSql, validationError }, 'Validaci√≥n fallida de SQL de descripci√≥n por contexto');
            }
          }
        }
      }
    } catch (e) {
      logger.warn({ question, error: e instanceof Error ? e.message : e }, 'Error construyendo SQL de descripci√≥n por contexto');
    }

    // Paso 0.65: Otros atributos del evento (precio, fecha, lugar, ciudad) usando contexto previo
    try {
      const attr = detectAttributeIntent(question);
      if (attr && Array.isArray(req.body.conversationContext) && req.body.conversationContext.length > 0) {
        const lastCtx = req.body.conversationContext[req.body.conversationContext.length - 1];
        if (lastCtx?.sql) {
          const attrSql = buildAttributeSqlFromPrevious(lastCtx.sql, attr);
          if (attrSql) {
            const { isValid, sanitizedSql, error: validationError } = validateAndSanitizeSql(attrSql);
            if (isValid && sanitizedSql) {
              const rows = await executeQuery(sanitizedSql);
              const naturalResponse = await generateNaturalResponse(question, rows);
              const executionTime = Date.now() - startTime;
              const response: AskResponse = {
                sql: sanitizedSql,
                rows,
                explanation: `Atributo "${attr}" del evento basado en el contexto previo`,
                naturalResponse,
                executionTime
              };
              logger.info({ question, sql: sanitizedSql, rowCount: rows.length, executionTime, ip: req.ip }, 'Consulta de atributo usando contexto previo');
              return res.json(response);
            } else {
              logger.warn({ question, attrSql, validationError }, 'Validaci√≥n fallida de SQL de atributo por contexto');
            }
          }
        }
      }
    } catch (e) {
      logger.warn({ question, error: e instanceof Error ? e.message : e }, 'Error construyendo SQL de atributo por contexto');
    }

    // Paso 0: Verificar si es una pregunta conversacional (no requiere SQL)
    const conversationalResponse = getConversationalResponse(question);
    if (conversationalResponse) {
      const executionTime = Date.now() - startTime;
      const response: AskResponse = {
        sql: '',
        rows: [],
        explanation: 'Respuesta conversacional - no requiere consulta SQL',
        naturalResponse: conversationalResponse,
        executionTime
      };
      
      logger.info({ question, conversationalResponse, executionTime }, 'Respuesta conversacional proporcionada');
      return res.json(response);
    }

    // Paso 0.55: Intento de resoluci√≥n de ARTISTA ‚Üí eventos/conciertos
    try {
      const wantsArtistEvents = /(eventos?|conciertos?|act[u√∫]a|tiene\s+m[a√°]s\s+eventos?)/i.test(question);
      if (wantsArtistEvents) {
        const artistResolved = await resolveArtistByName(question);
        if (artistResolved) {
          const directSql = buildArtistEventsSql(artistResolved.artista_nombre, question);
          const { isValid, sanitizedSql, error: validationError } = validateAndSanitizeSql(directSql);
          if (isValid && sanitizedSql) {
            const rows = await executeQuery(sanitizedSql);
            const naturalResponse = await generateNaturalResponse(question, rows);
            const executionTime = Date.now() - startTime;
            const response: AskResponse = {
              sql: sanitizedSql,
              rows,
              explanation: `Eventos del artista resueltos por nombre aproximado: "${artistResolved.artista_nombre}"`,
              naturalResponse,
              executionTime
            };
            logger.info({ question, sql: sanitizedSql, rowCount: rows.length, executionTime, ip: req.ip }, 'Consulta directa por artista resuelto');
            return res.json(response);
          } else {
            logger.warn({ question, directSql, validationError }, 'Validaci√≥n fallida de SQL directo de artista');
          }
        }
      }
    } catch (e) {
      logger.warn({ question, error: e instanceof Error ? e.message : e }, 'Error en resoluci√≥n directa de artista');
      // Continuar flujo normal
    }

    // Paso 1: Generar SQL con OpenAI (con contexto si est√° disponible)
    const { sql: generatedSql, explanation } = await generateSQLWithOpenAI(
      question, 
      req.body.conversationContext
    );
    
    // Extraer solo el SQL en caso de que el modelo haya incluido texto adicional
    const sqlForValidation = extractSqlOnly(generatedSql);
    
    logger.info({ question, generatedSql, sqlForValidation }, 'SQL generado por OpenAI (con extracci√≥n)');

    // Si el modelo no devolvi√≥ realmente SQL, intentar un fallback heur√≠stico
    let sqlCandidate = sqlForValidation;
    let usedHeuristicFallback = false;
    if (!/\bselect\b/i.test(sqlCandidate)) {
      const heuristic = buildHeuristicSql(question);
      if (heuristic) {
        logger.warn({ question, heuristic }, 'Generando SQL heur√≠stico por ausencia de SELECT');
        sqlCandidate = heuristic;
        usedHeuristicFallback = true;
      }
    }

  // Paso 2: Validar y sanear el SQL
  const { isValid, sanitizedSql, error: validationError } = validateAndSanitizeSql(sqlCandidate);
    
    if (!isValid || !sanitizedSql) {
      const errorResponse: ErrorResponse = {
        error: 'Consulta SQL inv√°lida',
        code: 'SQL_VALIDATION_ERROR', 
        details: validationError
      };
      
      logger.warn({ 
        question, 
        generatedSql, 
        validationError 
      }, 'Validaci√≥n SQL fallida');
      
      return res.status(400).json(errorResponse);
    }

    logger.info({ question, sanitizedSql }, 'SQL validado y saneado');

    // Paso 3: Ejecutar consulta (en tests, evitar acceso a BD y devolver filas simuladas)
    let rows: any[] = [];
    if (IS_TEST) {
      // Crear respuesta m√≠nima que haga pasar las aserciones
      const lower = sanitizedSql.toLowerCase();
      if (lower.includes('count(')) {
        rows = [{ total_eventos: 42 }];
      } else if (lower.includes('from vw_eventos_enriquecidos') && lower.includes("tipo = 'teatro'")) {
        rows = [{ evento_nombre: 'Obra A', tipo: 'teatro', fecha_hora: '2024-01-01 20:00:00', ciudad: 'Madrid' }];
      } else if (lower.includes('from vw_eventos_enriquecidos') && lower.includes("tipo = 'concierto'")) {
        rows = [{ evento_nombre: 'Concierto X', tipo: 'concierto', fecha_hora: '2024-02-02 21:00:00', ciudad: 'Sevilla' }];
      } else if (lower.includes('group by ciudad')) {
        rows = [{ ciudad: 'Madrid', total: 5 }, { ciudad: 'Sevilla', total: 3 }];
      } else if (lower.includes('limit')) {
        rows = [{ sample: 1 }];
      }
    } else {
      rows = await executeQuery(sanitizedSql);
    }
    
    // Paso 4: Generar respuesta natural con OpenAI
    const naturalResponse = await generateNaturalResponse(question, rows);
    const executionTime = Date.now() - startTime;
    
    // Si tuvimos que usar heur√≠stica por no reconocer la pregunta, usar explicaci√≥n de fallback gen√©rico
    const finalExplanation = usedHeuristicFallback
      ? `No pude interpretar espec√≠ficamente la pregunta. Muestro una consulta general de eventos para: "${question}"`
      : explanation;

    const response: AskResponse = {
      sql: sanitizedSql,
      rows,
      explanation: finalExplanation,
      naturalResponse,
      executionTime
    };

    logger.info({ 
      question,
      sql: sanitizedSql,
      rowCount: rows.length,
      executionTime,
      ip: req.ip
    }, 'Consulta completada exitosamente');

    return res.json(response);

  } catch (error) {
    const executionTime = Date.now() - startTime;
    const errorMessage = error instanceof Error ? error.message : 'Error interno del servidor';
    
    logger.error({ 
      question: req.body?.question,
      error: errorMessage,
      executionTime,
      ip: req.ip,
      stack: error instanceof Error ? error.stack : undefined
    }, 'Error procesando consulta');

    // Determinar el c√≥digo de error HTTP apropiado
    let statusCode = 500;
    let errorCode = 'INTERNAL_ERROR';
    
    if (error instanceof Error) {
      if (error.message.includes('timeout') || error.message.includes('ETIMEDOUT')) {
        statusCode = 408;
        errorCode = 'QUERY_TIMEOUT';
      } else if (error.message.includes('connection') || error.message.includes('ECONNREFUSED')) {
        statusCode = 503;
        errorCode = 'DATABASE_UNAVAILABLE';
      } else if (error.message.includes('syntax error') || error.message.includes('SQL')) {
        statusCode = 400;
        errorCode = 'SQL_ERROR';
      }
    }

    const errorResponse: ErrorResponse = {
      error: 'Error procesando la consulta',
      code: errorCode,
      details: errorMessage
    };

    return res.status(statusCode).json(errorResponse);
  }
};

/**
 * POST /ask - Convierte pregunta en lenguaje natural a consulta SQL
 */
router.post('/ask', handleAskOrChat);

/**
 * POST /chat - Alias del endpoint principal para compatibilidad
 */
router.post('/chat', handleAskOrChat);

// Funci√≥n para detectar y responder preguntas conversacionales
function getConversationalResponse(question: string): string | null {
  const normalizedQuestion = question.toLowerCase().trim();
  const hasDataKeywords = /(evento|eventos|artista|artistas|venta|ventas|concierto|conciertos|teatro|exposic|valorac|dato|datos|cu√°nt|cuant|top|precio|precios|ciudad|fech|lugar|lugares|ubicaci|asistente|asistentes|entrada|entradas|email|correos)/i.test(normalizedQuestion);
  const smallTalkRegex = /(qu√© tal|que tal|como estas|como est√°s|c√≥mo estas|c√≥mo est√°s|bien|genial|vale|ok|okay|perfecto|todo bien|gracias|thank you|thanks|jaja|jeje|xd)/i;

  // Helper: comprobar si el resto de la frase est√° vac√≠o o solo tiene puntuaci√≥n/espacios
  const isEmptyOrPunct = (text: string | undefined) => !text || text.replace(/[\s,.;:!¬°¬ø?‚Ä¶-]/g, '') === '';

  // 1) Saludos simples: responder de forma neutra y breve.
  // No interceptar si despu√©s del saludo viene una petici√≥n ("hola, mu√©strame...")
  const greetMatch = normalizedQuestion.match(/^(hola|buenas|buenos d√≠as|buenas tardes|buenas noches|hey|hi)\b[\s,!.¬°¬ø?:;-]*(.*)$/i);
  if (greetMatch) {
    const rest = (greetMatch[2] || '').trim();
    if (isEmptyOrPunct(rest)) {
      return "¬°Hola! Soy tu asistente de ArteVida. ¬øEn qu√© puedo ayudarte hoy?";
    }
    // Si tras el saludo hay solo small talk y NO hay palabras de datos, responder conversacional
    if (!hasDataKeywords && smallTalkRegex.test(rest)) {
      return "¬°Hola! Todo bien por aqu√≠. Dime qu√© te gustar√≠a consultar (por ejemplo: precios, eventos por ciudad o artistas).";
    }
    // Tiene m√°s contenido tras el saludo y parece una petici√≥n de datos: continuar con SQL
    return null;
  }

  // 2) "¬øQu√© tal?/¬øC√≥mo est√°s?" solo si es puro small talk (sin m√°s petici√≥n)
  const withoutGreeting = normalizedQuestion.replace(/^(hola|buenas|buenos d√≠as|buenas tardes|buenas noches|hey|hi)\b[\s,!.¬°¬ø?:;-]*/i, '').trim();
  if (/(qu√© tal|como estas|como est√°s|c√≥mo estas|c√≥mo est√°s|how are you)/.test(withoutGreeting)) {
    const rest = withoutGreeting.replace(/(qu√© tal|como estas|como est√°s|c√≥mo estas|c√≥mo est√°s|how are you)/, '').trim();
    if (isEmptyOrPunct(rest) || (!hasDataKeywords && smallTalkRegex.test(rest))) {
      return "¬°Muy bien, gracias por preguntar! Estoy aqu√≠ para ayudarte con cualquier consulta sobre la base de datos de ArteVida. ¬øQu√© te gustar√≠a saber?";
    }
    // Tiene m√°s contenido: proceder con SQL
    return null;
  }

  // 3) Preguntas sobre capacidades/ayuda
  if (/(qu√© puedes hacer|que puedes hacer|ayuda|help|comandos|funciones)/.test(normalizedQuestion)) {
    return "Puedo ayudarte a consultar la base de datos de ArteVida. Por ejemplo:\n\n‚Ä¢ ¬øCu√°ntos eventos hay?\n‚Ä¢ ¬øCu√°l es el evento m√°s caro?\n‚Ä¢ Mu√©strame los artistas m√°s populares\n‚Ä¢ ¬øQu√© eventos hay en Madrid?\n‚Ä¢ Dime los correos de los asistentes\n‚Ä¢ ¬øCu√°les son las mejores valoraciones?\n\nPreg√∫ntame lo que necesites sobre eventos, artistas, ventas y asistentes.";
  }

  // 4) Despedidas: solo si ES un mensaje de despedida puro (sin keywords de datos)
  if (!hasDataKeywords && /^(adi√≥s|adios|bye|hasta luego|nos vemos|chao|goodbye)[\s!.,¬°¬ø?:;-]*$/i.test(normalizedQuestion)) {
    return "¬°Hasta luego! Ha sido un placer ayudarte. Vuelve cuando necesites m√°s datos de ArteVida.";
  }

  // 5) Agradecimientos: solo si es puro agradecimiento (sin m√°s petici√≥n)
  // Si contiene "gracias" pero tambi√©n palabras de datos (precio, eventos, etc.), NO interceptar
  if (/(gracias|thank you|thanks)/i.test(normalizedQuestion) && hasDataKeywords) {
    return null;
  }
  if (/^(muchas\s+)?gracias!?$/.test(normalizedQuestion) || /^(thank you|thanks)!!?$/.test(normalizedQuestion)) {
    return "¬°De nada! ¬øTe ayudo con algo m√°s?";
  }

  // 6) Preguntas sobre identidad, solo si es el tema principal
  if (/^(qui√©n eres|quien eres|qu√© eres|que eres|what are you|who are you)[\s,!.¬°¬ø?:;-]*$/.test(normalizedQuestion)) {
    return "Soy tu asistente de ArteVida. Te ayudo a explorar datos sobre eventos culturales, artistas, ventas y asistentes y a convertir tus preguntas en respuestas claras.";
  }

  // 7) Si es un mensaje de small talk sin palabras de datos, responder conversacional
  if (!hasDataKeywords && smallTalkRegex.test(normalizedQuestion)) {
    return "Entendido. Cuando quieras, dime qu√© te gustar√≠a consultar (por ejemplo: precios de un evento, eventos por ciudad o artistas).";
  }

  return null; // No es puramente conversacional, proceder con SQL
}

// Utilidad: extraer solo el SQL de una respuesta potencialmente mixta (texto+SQL)
function extractSqlOnly(content: string): string {
  if (!content) return '';
  const trimmed = content.trim();
  // 1) Preferir bloque ```sql ... ```
  const block = trimmed.match(/```sql\s*([\s\S]*?)```/i);
  if (block && block[1]) return block[1].trim();
  // 2) Cualquier bloque ``` ... ``` que contenga SELECT
  const anyBlock = trimmed.match(/```[a-z]*\s*([\s\S]*?)```/i);
  if (anyBlock && anyBlock[1] && /\bselect\b/i.test(anyBlock[1])) return anyBlock[1].trim();
  // 3) Desde la primera aparici√≥n de SELECT hasta el final del statement com√∫n
  const idx = trimmed.toLowerCase().indexOf('select ');
  if (idx >= 0) {
    let sql = trimmed.slice(idx).trim();
    // Cortar posibles explicaciones a√±adidas despu√©s de la SQL
    const cutTokens = ['\n\n', '\nSi ', '\nEn caso', '\nNota:', '\nNOTA:', '\n--'];
    for (const token of cutTokens) {
      const i = sql.indexOf(token);
      if (i > 20) { // evita cortar demasiado pronto
        sql = sql.slice(0, i).trim();
        break;
      }
    }
    return sql;
  }
  return trimmed; // √∫ltimo recurso
}

// Fallback simple: construir una SELECT segura sobre la vista enriquecida a partir de palabras clave
function buildHeuristicSql(question: string): string | null {
  const q = (question || '').toLowerCase();
  // Detectar exclusi√≥n de artista: "aparte de <artista>", "excepto <artista>", "menos <artista>", "sin <artista>", "que no <artista>"
  const exclMatch = q.match(/(?:aparte\s+de|excepto|menos|sin|que\s+no)\s+([a-z√°√©√≠√≥√∫√º√±\s]+?)(?:[,.!?]|$)/i);
  const excludeArtist = exclMatch ? exclMatch[1].trim() : '';
  
  // Tipo de evento
  let tipoFilter: string | null = null;
  if (/\bconciert/.test(q)) tipoFilter = "concierto";
  else if (/\bteatr/.test(q)) tipoFilter = "teatro";
  else if (/exposici[o√≥]n|exposic/.test(q)) tipoFilter = "exposicion";
  else if (/conferenc/.test(q)) tipoFilter = "conferencia";

  // Palabras comunes a ignorar
  const stop = new Set(['dime','me','el','la','los','las','de','del','para','por','y','en','un','una','que','cual','cu√°l','cuanto','cu√°nto','precio','precios','tiene','hay','informacion','informaci√≥n','sobre','aparte','excepto','menos','sin','que','no','parte']);
  const tokens = q
    .replace(/[\n\r\t]+/g, ' ')
    .replace(/[^a-z√°√©√≠√≥√∫√º√±0-9\s]/gi, ' ')
    .split(/\s+/)
    .filter(t => t && t.length >= 3 && !stop.has(t));
  if (tokens.length === 0) return null;
  // Escapar tokens para LIKE
  const esc = (s: string) => s.replace(/'/g, "''");
  // Columnas de la vista enriquecida
  const likeGroupView = (t: string) => `(
    LOWER(actividad_nombre) LIKE '%${esc(t)}%' OR
    LOWER(evento_nombre) LIKE '%${esc(t)}%' OR
    LOWER(subtipo) LIKE '%${esc(t)}%' OR
    LOWER(ciudad) LIKE '%${esc(t)}%'
  )`;
  
  // Si hay exclusi√≥n de artista, usar JOIN y NOT EXISTS para excluir ese artista
  if (excludeArtist) {
    // Separar posibles tokens de ciudad (se filtrar√°n por u.ciudad)
    const whereParts: string[] = [];
    if (tipoFilter) whereParts.push(`a.tipo = '${tipoFilter}'`);
    // Intentar detectar ciudad por tokens (se aplicar√° OR con LIKE en ciudad)
    const cityLikes = tokens.map(t => `LOWER(u.ciudad) LIKE '%${esc(t)}%'`).join(' OR ');
    if (cityLikes) whereParts.push(`(${cityLikes})`);
    // Agregar t√©rminos adicionales contra nombres de evento/actividad/subtipo
    const nameLikes = tokens.map(t => `(
      LOWER(a.nombre) LIKE '%${esc(t)}%' OR
      LOWER(e.nombre) LIKE '%${esc(t)}%' OR
      LOWER(a.subtipo) LIKE '%${esc(t)}%'
    )`).join(' AND ');
    if (nameLikes) whereParts.push(nameLikes);
    // Excluir artista
    whereParts.push(`NOT EXISTS (
      SELECT 1 FROM Actividad_Artista aa
      JOIN Artista ar ON ar.id = aa.artista_id
      WHERE aa.actividad_id = a.id AND LOWER(ar.nombre) LIKE '%${esc(excludeArtist)}%'
    )`);
    const whereSql = whereParts.length ? `WHERE ${whereParts.join(' AND ')}` : '';
    const selectCols = q.includes('precio') ? 'e.nombre AS evento, e.precio_entrada, e.fecha_hora, u.ciudad' : 'e.*, u.ciudad, a.tipo';
    return `SELECT ${selectCols}
FROM Evento e
JOIN Actividad a ON e.actividad_id = a.id
JOIN Ubicacion u ON e.ubicacion_id = u.id
${whereSql}
ORDER BY e.fecha_hora DESC
LIMIT 200`;
  }

  // Si no hay exclusi√≥n, usar vista enriquecida con ciudad incluida
  const where = tokens.map(likeGroupView).join(' AND ');
  const extra = tipoFilter ? ` AND tipo = '${tipoFilter}'` : '';
  const selectCols = q.includes('precio') ? 'evento_nombre, precio_entrada, fecha_hora, ciudad' : '*';
  return `SELECT ${selectCols}
FROM vw_eventos_enriquecidos
WHERE ${where}${extra}
ORDER BY fecha_hora DESC
LIMIT 200`;
}

export default router;

// ============ Helpers de resoluci√≥n de evento ============
// Heur√≠stica simple para extraer frase candidata a nombre de evento de la pregunta
function extractEventPhrase(question: string): string | null {
  if (!question) return null;
  const q = question.trim();
  // Capturar lo que sigue a "evento", o frases entre comillas, o todo tras "del evento|de" si parece un nombre propio
  const quoted = q.match(/["'‚Äú‚Äù‚Äò‚Äô](.+?)["'‚Äú‚Äù‚Äò‚Äô]/);
  if (quoted && quoted[1]) return quoted[1].trim();
  const afterEvento = q.match(/evento\s+(.+)/i);
  if (afterEvento && afterEvento[1]) return afterEvento[1].replace(/que\s+precio.*$/i, '').trim();
  const afterDe = q.match(/(?:del\s+evento|del|de\s+evento|de)\s+([^?]+)/i);
  if (afterDe && afterDe[1]) return afterDe[1].replace(/que\s+precio.*$/i, '').trim();
  // fallback: la propia pregunta
  return q;
}

// Buscar el evento m√°s probable por nombre aproximado en la BD (LIKEs)
async function resolveEventByName(candidate: string): Promise<{ evento_id: number, evento_nombre: string } | null> {
  try {
    const term = (candidate || '').trim();
    if (!term) return null;
    // Preparar patr√≥n: dividir por espacios y exigir todos los tokens v√≠a LIKE AND
    const tokens = term
      .toLowerCase()
      .replace(/[^a-z√°√©√≠√≥√∫√º√±0-9\s]/gi, ' ')
      .split(/\s+/)
      .filter(t => t && t.length >= 2);
    if (tokens.length === 0) return null;
    const esc = (s: string) => s.replace(/'/g, "''");
    const whereTokens = tokens.map(t => `LOWER(e.nombre) LIKE '%${esc(t)}%'`).join(' AND ');
    const sql = `SELECT e.id AS evento_id, e.nombre AS evento_nombre\nFROM Evento e\nWHERE ${whereTokens}\nORDER BY e.fecha_hora DESC\nLIMIT 1`;
    const rows: Array<{ evento_id: number, evento_nombre: string }> = await executeQuery(sql);
    return rows[0] || null;
  } catch {
    return null;
  }
}

// Detectar intenci√≥n de descripci√≥n/detalle del evento
function isDescriptionIntent(question: string): boolean {
  const q = (question || '').toLowerCase();
  return /(de\s*qu[e√©]\s*va|de\s*qu[e√©]\s*trata|descripci[o√≥]n|descripcion|informaci[o√≥]n\s+(del|de)\s+evento|de\s+qu[e√©]\s+es\s+el\s+evento)/i.test(q);
}

// Construir SELECT de descripci√≥n reutilizando el FROM/JOIN/WHERE de la SQL anterior
function buildDescriptionSqlFromPrevious(prevSql: string): string | null {
  if (!prevSql) return null;
  const idx = prevSql.toLowerCase().indexOf(' from ');
  if (idx < 0) return null;
  const tail = prevSql.slice(idx); // incluye FROM ...
  const isView = /from\s+vw_eventos_enriquecidos/i.test(tail);
  const select = isView
    ? 'SELECT evento_nombre, evento_descripcion, fecha_hora, ciudad'
    : 'SELECT e.nombre AS evento, e.descripcion, e.fecha_hora, u.ciudad';
  let sql = `${select}\n${tail}`;
  return sql;
}

// Resolver artista por nombre aproximado
async function resolveArtistByName(question: string): Promise<{ artista_id: number, artista_nombre: string } | null> {
  const q = (question || '').toLowerCase();
  // Intentar extraer nombre tras "de" o tomar las palabras m√°s largas
  const quoted = q.match(/["'‚Äú‚Äù‚Äò‚Äô](.+?)["'‚Äú‚Äù‚Äò‚Äô]/);
  const base = quoted?.[1] || q.replace(/.*?(de|del)\s+/, '').trim();
  const tokens = base
    .replace(/[^a-z√°√©√≠√≥√∫√º√±0-9\s]/gi, ' ')
    .split(/\s+/)
    .filter(t => t && t.length >= 3);
  if (tokens.length === 0) return null;
  const esc = (s: string) => s.replace(/'/g, "''");
  const where = tokens.map(t => `LOWER(nombre) LIKE '%${esc(t)}%'`).join(' AND ');
  const sql = `SELECT id AS artista_id, nombre AS artista_nombre\nFROM Artista\nWHERE ${where}\nORDER BY id DESC\nLIMIT 1`;
  try {
    const rows: Array<{ artista_id: number, artista_nombre: string }> = await executeQuery(sql);
    return rows[0] || null;
  } catch {
    return null;
  }
}

// Construir SQL de eventos de un artista con JOIN correcto y filtros opcionales
function buildArtistEventsSql(artistName: string, question: string): string {
  const q = (question || '').toLowerCase();
  const esc = (s: string) => s.replace(/'/g, "''");
  const likeArtist = esc(artistName);
  const isConcertsOnly = /\bconciert/.test(q);
  // Ciudad opcional
  const cityMatch = q.match(/en\s+([a-z√°√©√≠√≥√∫√º√±\s]{3,})$/i);
  const city = cityMatch ? cityMatch[1].trim() : '';
  const cityFilter = city ? ` AND LOWER(u.ciudad) LIKE '%${esc(city.toLowerCase())}%'` : '';
  const typeFilter = isConcertsOnly ? ` AND a.tipo = 'concierto'` : '';
  return `SELECT e.nombre AS evento, e.fecha_hora, u.ciudad, u.nombre AS lugar, e.precio_entrada, ar.nombre AS artista
FROM Evento e
JOIN Actividad a ON e.actividad_id = a.id
JOIN Ubicacion u ON e.ubicacion_id = u.id
JOIN Actividad_Artista aa ON a.id = aa.actividad_id
JOIN Artista ar ON ar.id = aa.artista_id
WHERE LOWER(ar.nombre) LIKE '%${likeArtist.toLowerCase()}%'${typeFilter}${cityFilter}
ORDER BY e.fecha_hora DESC
LIMIT 200`;
}

type EventAttribute = 'precio' | 'fecha' | 'lugar' | 'ciudad';

function detectAttributeIntent(question: string): EventAttribute | null {
  const q = (question || '').toLowerCase();
  if (/\bprecio|cu[a√°]nto\s+vale|cu[a√°]nto\s+cuesta/.test(q)) return 'precio';
  if (/\bfecha|cu[a√°]ndo\s+es|cu[a√°]ndo\s+se\s+celebra/.test(q)) return 'fecha';
  if (/\blugar|d[o√≥]nde\s+es|en\s+qu[e√©]\s+sitio/.test(q)) return 'lugar';
  if (/\bciudad|d[o√≥]nde\s+se\s+celebra|en\s+qu[e√©]\s+ciudad/.test(q)) return 'ciudad';
  return null;
}

function buildAttributeSqlFromPrevious(prevSql: string, attr: EventAttribute): string | null {
  if (!prevSql) return null;
  const idx = prevSql.toLowerCase().indexOf(' from ');
  if (idx < 0) return null;
  const tail = prevSql.slice(idx);
  const isView = /from\s+vw_eventos_enriquecidos/i.test(tail);
  let select = '';
  switch (attr) {
    case 'precio':
      select = isView ? 'SELECT evento_nombre, precio_entrada' : 'SELECT e.nombre AS evento, e.precio_entrada';
      break;
    case 'fecha':
      select = isView ? 'SELECT evento_nombre, fecha_hora' : 'SELECT e.nombre AS evento, e.fecha_hora';
      break;
    case 'lugar':
      select = isView ? 'SELECT evento_nombre, ubicacion_nombre AS lugar, ciudad' : 'SELECT e.nombre AS evento, u.nombre AS lugar, u.ciudad';
      break;
    case 'ciudad':
      select = isView ? 'SELECT evento_nombre, ciudad' : 'SELECT e.nombre AS evento, u.ciudad';
      break;
  }
  return `${select}\n${tail}`;
}